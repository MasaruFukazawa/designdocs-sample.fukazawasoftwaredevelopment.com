[ テーブル名 ]
============================================

概要
--------------------------------------------

**テーブル目的**: [ テーブルの目的（例：会員基本情報の管理、注文履歴の記録） ]

**設計方針**: [ 設計の方針（例：正規化レベル、パフォーマンス重視） ]

**想定レコード数**: [ 想定レコード数（例：初期10万件、年間成長率20%） ]

**データベース**: [ 使用DB（例：PostgreSQL 13以降、MySQL 8.0以降） ]

**関連集約**: [ 対応するDDD集約（例：Member集約、Order集約） ]

テーブル定義
--------------------------------------------

.. list-table::
   :header-rows: 1

   * - カラム名
     - 論理名
     - データ型
     - NULL/NOT NULL
     - デフォルト値
     - 説明
   * - [ カラム名1 ]
     - [ 論理名1 ]
     - [ データ型（例：UUID, VARCHAR(255), INTEGER） ]
     - [ NULL/NOT NULL ]
     - [ デフォルト値 ]
     - [ カラムの説明・用途 ]
   * - [ カラム名2 ]
     - [ 論理名2 ]
     - [ データ型 ]
     - [ NULL/NOT NULL ]
     - [ デフォルト値 ]
     - [ カラムの説明・用途 ]
   * - created_at
     - 作成日時
     - TIMESTAMP
     - NOT NULL
     - CURRENT_TIMESTAMP
     - レコード作成日時
   * - updated_at
     - 更新日時
     - TIMESTAMP
     - NOT NULL
     - CURRENT_TIMESTAMP
     - レコード最終更新日時

制約定義
--------------------------------------------

**主キー制約**:

- **制約名**: pk_[ テーブル名 ]
- **対象カラム**: [ 主キーカラム名 ]（例：id）
- **説明**: [ 主キーの説明 ]

**外部キー制約**:

.. list-table::
   :header-rows: 1

   * - 制約名
     - カラム名
     - 参照テーブル
     - 参照カラム
     - ON DELETE
     - ON UPDATE
   * - fk_[ 制約名1 ]
     - [ カラム名1 ]
     - [ 参照テーブル名 ]
     - [ 参照カラム名 ]
     - [ DELETE動作 ]
     - [ UPDATE動作 ]
   * - fk_[ 制約名2 ]
     - [ カラム名2 ]
     - [ 参照テーブル名 ]
     - [ 参照カラム名 ]
     - [ DELETE動作 ]
     - [ UPDATE動作 ]

**一意制約**:

.. list-table::
   :header-rows: 1

   * - 制約名
     - 対象カラム
     - 説明
   * - uk_[ 制約名1 ]
     - [ カラム名 ]（例：email）
     - [ 一意性の説明（例：メールアドレスの重複禁止） ]
   * - uk_[ 制約名2 ]
     - [ カラム名1, カラム名2 ]
     - [ 複合一意制約の説明 ]

**チェック制約**:

.. list-table::
   :header-rows: 1

   * - 制約名
     - 条件式
     - 説明
   * - chk_[ 制約名1 ]
     - [ 条件（例：status IN ('active', 'inactive', 'suspended')） ]
     - [ チェック制約の説明 ]
   * - chk_[ 制約名2 ]
     - [ 条件（例：created_at <= updated_at） ]
     - [ チェック制約の説明 ]

インデックス定義
--------------------------------------------

**パフォーマンス用インデックス**:

.. list-table::
   :header-rows: 1

   * - インデックス名
     - 種類
     - 対象カラム
     - 用途
   * - idx_[ インデックス名1 ]
     - [ 種類（例：B-tree, Hash, GIN） ]
     - [ カラム名 ]（例：email）
     - [ 用途（例：ログイン時の検索高速化） ]
   * - idx_[ インデックス名2 ]
     - [ 種類 ]
     - [ カラム名1, カラム名2 ]
     - [ 用途（例：複合条件での検索高速化） ]

**部分インデックス** （該当する場合）:

.. list-table::
   :header-rows: 1

   * - インデックス名
     - 対象カラム
     - WHERE条件
     - 用途
   * - idx_[ 部分インデックス名 ]
     - [ カラム名 ]
     - [ 条件（例：status = 'active'） ]
     - [ 用途（例：アクティブユーザーのみの検索） ]

**フルテキストインデックス** （該当する場合）:

.. list-table::
   :header-rows: 1

   * - インデックス名
     - 対象カラム
     - 言語設定
     - 用途
   * - idx_[ フルテキストインデックス名 ]
     - [ カラム名 ]
     - [ 言語（例：japanese） ]
     - [ 用途（例：本文検索機能） ]

ER図
--------------------------------------------

.. mermaid::

   %%{init: {"theme": "default"}}%%
   erDiagram
       [ テーブル名1 ] {
           [ データ型 ] [ カラム名1 ] PK "[ 説明 ]"
           [ データ型 ] [ カラム名2 ] FK "[ 説明 ]"
           [ データ型 ] [ カラム名3 ] "[ 説明 ]"
           TIMESTAMP created_at "作成日時"
           TIMESTAMP updated_at "更新日時"
       }
       
       [ テーブル名2 ] {
           [ データ型 ] [ カラム名1 ] PK "[ 説明 ]"
           [ データ型 ] [ カラム名2 ] "[ 説明 ]"
           TIMESTAMP created_at "作成日時"
           TIMESTAMP updated_at "更新日時"
       }
       
       [ テーブル名1 ] ||--o{ [ テーブル名2 ] : "[ リレーション説明 ]"

初期データ・マスタデータ
--------------------------------------------

**必須初期データ**:

.. list-table::
   :header-rows: 1

   * - [ カラム名1 ]
     - [ カラム名2 ]
     - [ カラム名3 ]
     - 説明
   * - [ 値1 ]
     - [ 値2 ]
     - [ 値3 ]
     - [ データの説明 ]
   * - [ 値1 ]
     - [ 値2 ]
     - [ 値3 ]
     - [ データの説明 ]

**INSERT文例**:

.. code-block:: sql

   -- [ 初期データの説明 ]
   INSERT INTO [ テーブル名 ] ([ カラム1 ], [ カラム2 ], [ カラム3 ]) VALUES
   ('[ 値1 ]', '[ 値2 ]', '[ 値3 ]'),
   ('[ 値1 ]', '[ 値2 ]', '[ 値3 ]');

データメンテナンス
--------------------------------------------

**定期メンテナンス**:

- [ メンテナンス項目1（例：期限切れデータの削除） ]
  - **実行頻度**: [ 頻度（例：毎日深夜2時） ]
  - **対象条件**: [ 条件（例：created_at < CURRENT_DATE - INTERVAL '1 year'） ]
  - **実行方法**: [ 方法（例：バッチスクリプト） ]

- [ メンテナンス項目2（例：統計情報の更新） ]
  - **実行頻度**: [ 頻度（例：毎週日曜日） ]
  - **対象**: [ 対象（例：全テーブルの統計情報） ]
  - **実行方法**: [ 方法（例：ANALYZE文の実行） ]

**データアーカイブ**:

- [ アーカイブ対象（例：1年以上経過した非アクティブデータ） ]
- [ アーカイブ先（例：別テーブル、外部ストレージ） ]
- [ アーカイブ頻度（例：四半期ごと） ]

パフォーマンス考慮事項
--------------------------------------------

**想定クエリパターン**:

.. list-table::
   :header-rows: 1

   * - クエリ種別
     - 頻度
     - 条件
     - 最適化方針
   * - [ クエリ種別1（例：ログイン認証） ]
     - [ 頻度（例：高頻度） ]
     - [ 条件（例：email = ?） ]
     - [ 最適化（例：emailにインデックス作成） ]
   * - [ クエリ種別2（例：一覧表示） ]
     - [ 頻度（例：中頻度） ]
     - [ 条件（例：status = ? ORDER BY created_at） ]
     - [ 最適化（例：複合インデックス作成） ]

**パーティショニング** （大量データの場合）:

- [ パーティション方法（例：日付レンジパーティション） ]
- [ パーティション単位（例：月単位） ]
- [ パーティション管理（例：自動パーティション作成） ]

**レプリケーション**:

- [ 読み取り専用レプリカの活用 ]
- [ 非同期レプリケーション設定 ]
- [ 読み書き分離の実装 ]

**キャッシュ戦略**:

- [ キャッシュ対象（例：頻繁にアクセスされるマスタデータ） ]
- [ キャッシュ方式（例：Redis、アプリケーションレベルキャッシュ） ]
- [ 無効化タイミング（例：データ更新時） ]

セキュリティ考慮事項
--------------------------------------------

**暗号化**:

- [ 暗号化対象（例：機密性の高い個人情報カラム） ]
- [ 暗号化方式（例：AES-256、データベースレベル暗号化） ]
- [ キー管理（例：AWS KMS、専用キー管理システム） ]

**アクセス制御**:

- [ ユーザー権限（例：アプリケーション用ユーザー、管理用ユーザー） ]
- [ テーブルレベル権限（例：SELECT、INSERT、UPDATE、DELETE） ]
- [ カラムレベル権限（例：機密カラムへのアクセス制限） ]

**監査ログ**:

- [ 監査対象（例：データ変更操作、機密データアクセス） ]
- [ ログ出力項目（例：ユーザー、操作種別、変更前後の値、タイムスタンプ） ]
- [ ログ保存期間（例：1年間） ]

**データマスキング**:

- [ マスキング対象（例：開発・テスト環境での個人情報） ]
- [ マスキング方式（例：ランダム文字列置換、フォーマット保持マスキング） ]

バックアップ・リカバリ
--------------------------------------------

**バックアップ戦略**:

- [ フルバックアップ頻度（例：毎日深夜） ]
- [ 差分バックアップ頻度（例：6時間毎） ]
- [ バックアップ保存期間（例：30日間） ]
- [ バックアップ格納先（例：AWS S3、外部ストレージ） ]

**リカバリ手順**:

.. list-table::
   :header-rows: 1

   * - 障害種別
     - 復旧手順
     - 目標復旧時間（RTO）
   * - [ 論理削除（例：誤ったDELETE文実行） ]
     - [ 手順（例：ポイントインタイム復旧） ]
     - [ 時間（例：30分以内） ]
   * - [ 物理障害（例：ディスク障害） ]
     - [ 手順（例：レプリカへのフェイルオーバー） ]
     - [ 時間（例：5分以内） ]

**災害対策**:

- [ 別リージョンへのレプリケーション ]
- [ 災害時のフェイルオーバー手順 ]
- [ データセンター障害時の復旧手順 ]

運用監視
--------------------------------------------

**監視項目**:

.. list-table::
   :header-rows: 1

   * - 監視項目
     - 監視間隔
     - 警告閾値
     - 緊急閾値
   * - [ 項目1（例：テーブルサイズ） ]
     - [ 間隔（例：1時間毎） ]
     - [ 警告閾値（例：80%） ]
     - [ 緊急閾値（例：90%） ]
   * - [ 項目2（例：レスポンス時間） ]
     - [ 間隔（例：5分毎） ]
     - [ 警告閾値（例：100ms） ]
     - [ 緊急閾値（例：500ms） ]

**アラート設定**:

- [ アラート通知先（例：運用チーム、開発チーム） ]
- [ 通知方法（例：メール、Slack、PagerDuty） ]
- [ エスカレーション手順（例：緊急時の連絡体制） ]

**ログ監視**:

- [ エラーログ監視（例：接続エラー、クエリエラー） ]
- [ スロークエリ監視（例：実行時間1秒以上） ]
- [ セキュリティログ監視（例：不審なアクセスパターン） ]

関連情報
--------------------------------------------

**関連DDD設計**:

- :doc:`../ddd/[ 関連DDD設計名 ]`

**関連ユースケース**:

- :doc:`../usecase/[ 関連ユースケース名 ]`

**データベース全体設計**:

- :doc:`er`: データベース全体ER図（このテーブル追加時は必ず更新）

**その他の関連テーブル**:

- :doc:`[ 関連テーブル名1 ]`
- :doc:`[ 関連テーブル名2 ]`

ER図更新手順
--------------------------------------------

**このテーブル作成時の必須作業**:

1. **全体ER図の更新**: :doc:`er` ページのMermaid ER図にこのテーブルを追加
2. **リレーション定義**: 他のテーブルとの関係を全体ER図に反映
3. **テーブル一覧更新**: 全体ER図ページのテーブル一覧にこのテーブルを追加
4. **制約サマリー更新**: 新しい制約があれば全体ER図ページに反映

**Mermaid構文例**:

このテーブルを全体ER図に追加する際のMermaid構文：

.. code-block:: text

   [ テーブル名 ] {
       [ データ型 ] [ カラム名1 ] PK "[ 説明 ]"
       [ データ型 ] [ カラム名2 ] FK "[ 説明 ]"
       [ データ型 ] [ カラム名3 ] "[ 説明 ]"
       TIMESTAMP created_at "作成日時"
       TIMESTAMP updated_at "更新日時"
   }
   
   %% 他テーブルとのリレーション
   [ 親テーブル名 ] ||--o{ [ テーブル名 ] : "[ リレーション説明 ]"

**設計整合性チェック**:

- [ ] 全体ER図にテーブルが追加されている
- [ ] リレーションシップが正しく定義されている  
- [ ] テーブル一覧に新しいテーブルが記載されている
- [ ] 制約サマリーに新しい制約が反映されている
- [ ] インデックス戦略が全体ER図に反映されている



