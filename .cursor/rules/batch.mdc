---
description: 
globs: 
alwaysApply: true
---
# バッチ処理設計ルール

このプロジェクトでバッチ処理設計を作成・更新する際の標準ルールです。

## 基本ルール

### 1. ファイル保存場所
- バッチ処理設計: [docs/design/source/batch/](mdc:docs/design/source/batch) ディレクトリに保存
- テンプレート: [docs/design/source/batch/template.rst](mdc:docs/design/source/batch/template.rst)
- インデックス: [docs/design/source/batch/index.rst](mdc:docs/design/source/batch/index.rst)

### 2. テンプレートの使用
- **ファイル名**: `{処理目的}_{対象データ}.rst` 形式
  - 例: `user_sync.rst`, `sales_report.rst`, `data_cleanup.rst`
- **処理ID**: `BATCH_{処理分類}_{具体処理}` 形式
  - 例: `BATCH_SYNC_USER`, `BATCH_REPORT_SALES`, `BATCH_MAINT_CLEANUP`

### 3. インデックスファイルへの追加
- [docs/design/source/batch/index.rst](mdc:docs/design/source/batch/index.rst) にリンクを追加
- 業務分類ごとにグループ化
- テンプレートファイルは最後に配置

### 4. 用語・設計の統一
- 新しい用語は [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) に定義を追加
- 専門用語、システム固有の概念、業務用語は必ず定義
- ドメインモデルの用語と一貫性を保つ

## 設計原則

### 基本原則
1. **単一責任の原則**: 1つのバッチ処理は1つの明確な責務を持つ
2. **冪等性の確保**: 同一データに対して複数回実行しても結果が変わらない設計
3. **障害耐性**: エラー発生時も部分実行結果を保持し、復旧可能な設計
4. **監視可能性**: 処理状況とエラーを適切にログ出力・通知する設計
5. **パフォーマンス重視**: 大量データを効率的に処理できる設計

### 実装ガイドライン
1. **処理時間制限**
   - 日次バッチ: 2時間以内
   - 週次バッチ: 4時間以内
   - 月次バッチ: 8時間以内

2. **リソース管理**
   - メモリ使用量: システムメモリの50%以下
   - 並列処理: CPU コア数の2倍まで
   - データベース接続: コネクションプールを使用

3. **エラーハンドリング**
   - 継続可能エラー: スキップして処理継続
   - 一時的エラー: リトライ処理（最大3回）
   - 致命的エラー: 処理停止と即時通知

### ディレクトリ構造
```
batch/
├── index.rst              # バッチ処理一覧
├── template.rst           # 新規作成用テンプレート
├── {業務分類}/             # 業務別ディレクトリ（必要に応じて）
│   ├── user_management.rst
│   └── sales_analysis.rst
└── maintenance/           # 運用・保守バッチ
    ├── log_cleanup.rst
    └── health_check.rst
```

### セキュリティ要件
1. **認証情報管理**
   - API キー、パスワードは環境変数または専用の秘密管理システムで管理
   - ハードコーディング禁止

2. **アクセス制御**
   - 必要最小限の権限でのデータベース・API アクセス
   - 実行ユーザーの適切な権限設定

3. **データ保護**
   - 個人情報を含むログ出力の禁止
   - 一時ファイルの適切な削除

### 監視・通知要件
1. **必須ログ出力**
   - 開始・終了時刻
   - 処理件数（成功・失敗・スキップ）
   - エラー詳細（エラーメッセージ、スタックトレース）
   - リソース使用量（実行時間、メモリ、CPU）

2. **通知条件**
   - 正常完了: INFO レベル通知
   - 警告事象: WARN レベル通知（継続可能エラー）
   - 異常終了: ERROR レベル通知（即座の対応が必要）

## 品質チェック

### 作成時チェックポイント
- [ ] GitHubのissueやユーザーストーリーと内容が一致している
- [ ] テンプレート構造に従って記述されている
- [ ] 処理フローが具体的で実装可能
- [ ] エラーハンドリングが網羅的に定義されている
- [ ] パフォーマンス要件が明確に設定されている
- [ ] インデックスファイルにリンクが追加されている
- [ ] 関連するユースケース・データベース設計との整合性確認
- [ ] シーケンス図が処理フローを正確に表現している

### レビューポイント
- [ ] 業務要件を満たしているか
- [ ] 技術的な実現可能性があるか
- [ ] エラー時の影響範囲が適切に考慮されているか
- [ ] 運用・保守の観点で実用的か
- [ ] セキュリティ要件が適切に考慮されているか
- [ ] 他のバッチ処理・システムとの競合がないか
- [ ] パフォーマンス要件が現実的か

### テスト要件
1. **機能テスト**
   - 正常データでの処理完了
   - 境界値データでの動作確認
   - 異常データでのエラーハンドリング
   - 大量データでの性能確認

2. **統合テスト**
   - 外部システム連携の動作確認
   - データベース更新の整合性確認
   - ログ出力・通知機能の動作確認

3. **運用テスト**
   - スケジュール実行の動作確認
   - エラー時の復旧手順確認
   - 監視システムとの連携確認

## 作業手順

### 1. インプット情報の収集
- GitHubのissueの内容確認
- [docs/design/source/usecase/](mdc:docs/design/source/usecase) のユースケース参照
- [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) でエンティティと用語確認
- [docs/design/source/database/](mdc:docs/design/source/database) のデータベース設計参照

### 2. バッチ処理の分析
- **処理目的**: ユースケースの「事後条件」から処理目的を特定
- **処理タイミング**: ユースケースの「トリガー」から実行条件と頻度を特定
- **データフロー**: ユースケースの「基本フロー」に基づいて入出力データとエンティティの関係を分析
- **エラー条件**: ユースケースの「代替フロー」から異常系と復旧方法を特定

### 3. ファイル作成
- ユースケースの処理フローに基づいたバッチ処理定義ファイルの作成
- 設定ファイルのテンプレート作成
- ログ設定ファイルの準備

### 4. 記述作成
- ユースケースの基本フローに基づいた処理フローの詳細定義
- ユースケースの代替フローに基づいたエラーハンドリングの実装方針
- パフォーマンス要件の定義
- 運用手順の記述
- チェックリストに基づく品質確認

### 5. Git運用
- コミットメッセージの作成（feat(batch): バッチ処理追加 - [概要]）
- 変更内容の最終確認
- プッシュとレビュー依頼

## 関連ドキュメント
- **ワークフロー**: [.cursor/rules/workflow.mdc](mdc:.cursor/rules/workflow.mdc)
- **ユーザーストーリー**: [.cursor/rules/user_story.mdc](mdc:.cursor/rules/user_story.mdc)
- **ユースケース**: [.cursor/rules/usecase.mdc](mdc:.cursor/rules/usecase.mdc)
- **ドメインモデル**: [.cursor/rules/domain_model.mdc](mdc:.cursor/rules/domain_model.mdc)
- **データベース設計**: [.cursor/rules/database.mdc](mdc:.cursor/rules/database.mdc)
- **Git運用**: [.cursor/rules/git.mdc](mdc:.cursor/rules/git.mdc)
