---
description: 
globs: 
alwaysApply: true
---
# ドメインモデル作成ルール

このプロジェクトでドメインモデルを作成・更新する際の標準ルールです。

## 基本ルール

### 1. ファイル保存場所
- ドメインモデル定義: [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst)（単一ファイル管理、テンプレート形式）
- 用語・概念の統一管理を目的とする

### 2. 設計パターンの適用
- **ECBパターン（Entity-Control-Boundary）**: システム要素の責務分離
- **DDD（ドメイン駆動設計）**: ビジネス概念と値オブジェクトの明確化
- **統一ワークフロー**: issue → ユーザーストーリー → **ドメインモデル** → ユースケース

### 3. 用語・概念の統一
- 新しいアクター、エンティティ、用語は必ずドメインモデルに定義
- プロジェクト全体で一貫した用語を使用
- 設計パターン別の分類を維持

## 設計パターン別分類

### エンティティ（Entity）
**特徴**: 
- 一意性を持つオブジェクト（IDで識別）
- ライフサイクルがある
- 状態変更が可能

**判断基準**:
- 「このオブジェクトは他と区別できる一意性があるか？」
- 「時間経過とともに状態が変わるか？」

### コントローラ（Controller）
**特徴**:
- ビジネスロジックの実行
- エンティティ間の協調制御
- ワークフローの管理

**判断基準**:
- 「このロジックは複数のエンティティにまたがるか？」
- 「ビジネスルールの実行責任を持つか？」

### バウンダリ（Boundary）
**特徴**:
- システム境界での入出力処理
- 外部システムとの連携
- ユーザーインターフェース

**判断基準**:
- 「外部システムとの通信を行うか？」
- 「ユーザーからの入力を受け付けるか？」

### ビジネス概念（Domain Concepts）
**特徴**:
- ドメイン固有のビジネスルール
- 業務知識の明文化
- システム横断的な概念

**判断基準**:
- 「業務特有の重要な概念か？」
- 「システム全体で共通理解が必要か？」

### 値オブジェクト（Value Objects）
**特徴**:
- 不変オブジェクト
- 値による等価性判断
- 型安全性の向上

**判断基準**:
- 「値そのものが重要で、同一性は不要か？」
- 「不変であるべきか？」

## Mermaidクラス図作成ルール

### 基本記法（Sphinx環境対応）
```mermaid
%%{init: {"theme": "default"}}%%
classDiagram
    class EntityName["エンティティ名"] {
        +attribute1: type
        +attribute2: type
        --
        +method1()
        +method2()
    }
```

### 推奨記法
- **クラス定義**: `class EntityName["日本語名"]`
- **属性**: `+attribute_name: data_type`
- **メソッド**: `+methodName()`
- **リレーション**: `ClassA --> ClassB`（シンプルな矢印）

### 避けるべき記法
- 複雑なリレーション記法（`||--||`、`||--o{`など）
- 日本語ラベル付きリレーション（`: "関係名"`）
- 点線矢印（`-.->` ）
- 絵文字やスペシャル文字

## 品質チェック

### 作成時チェックポイント
- [ ] ユーザーストーリーの新しい用語がすべて定義されている
- [ ] 設計パターン別の分類が適切にされている
- [ ] アクターが明確に識別されている
- [ ] エンティティに一意性（ID）が定義されている
- [ ] 値オブジェクトの不変性が明記されている
- [ ] Mermaidクラス図がSphinx環境で表示される

### レビューポイント
- [ ] 用語の一貫性が保たれている
- [ ] ビジネス価値が明確に示されている
- [ ] 設計パターンの適用が適切
- [ ] クラス図が論理的に整合している
- [ ] 他の設計文書との整合性がある

## 他の設計文書との連携

### ユーザーストーリーとの関係
- ユーザーストーリーで出現した新しい用語・アクターを定義
- As a **[アクター]** の部分はドメインモデルのアクターと一致させる
- ビジネス価値をドメイン概念として抽象化

### ユースケースとの関係
- ドメインモデルのアクターをユースケースで使用
- エンティティとコントローラがユースケースのロジックに対応
- 用語の一貫性を保つ

### データベース設計との関係
- エンティティがテーブル設計の基準となる
- 値オブジェクトがカラム設計に影響
- リレーションシップがER図に反映

## 注意事項

### 必須事項
- 新しい用語は必ずドメインモデルに定義すること
- 設計パターンの分類を必ず実施すること
- ユーザーストーリーとの整合性を保つこと
- Mermaid図はSphinx環境で動作する形式を使用すること

### 品質向上のために
- ビジネス価値を常に意識すること
- ドメインエキスパートとの対話を重視すること
- 実装可能性を考慮すること
- チームメンバーとの用語統一を図ること

## 作業手順

### 1. インプット情報の収集
- GitHubのissueの内容確認
- [docs/design/source/user_story/](mdc:docs/design/source/user_story) のユーザーストーリー参照
- [docs/design/source/usecase/](mdc:docs/design/source/usecase) のユースケース参照（ユースケース作成後）
- 既存のドメインモデルの確認

### 2. ドメインの分析
- **用語の特定**: ユーザーストーリーとユースケースから新しい用語を抽出
- **概念の分類**: ユースケースの振る舞いに基づいてエンティティ、コントローラ、バウンダリ、値オブジェクトを分類
- **関係性の分析**: ユースケース図の関係性に基づいて既存の用語・概念との関係性を整理

### 3. ファイル作成
- domain_model.rstの更新準備
- ユースケース図の関係性を反映したMermaid図の作成・更新
- インデックスの更新確認

### 4. 記述作成
- ユースケースで定義された振る舞いに基づいて新しい用語・概念の定義を追加
- ユースケース図の関係性を反映したクラス図の更新
- 既存の定義との整合性確認
- チェックリストに基づく品質確認

### 5. Git運用
- コミットメッセージの作成（feat(domain): 用語追加 - [概要]）
- 変更内容の最終確認
- プッシュとレビュー依頼

## 関連ドキュメント
- **ワークフロー**: [.cursor/rules/workflow.mdc](mdc:.cursor/rules/workflow.mdc)
- **ユーザーストーリー**: [.cursor/rules/user_story.mdc](mdc:.cursor/rules/user_story.mdc)
- **ユースケース**: [.cursor/rules/usecase.mdc](mdc:.cursor/rules/usecase.mdc)
- **Git運用**: [.cursor/rules/git.mdc](mdc:.cursor/rules/git.mdc)
- **メール定義**: [.cursor/rules/mail.mdc](mdc:.cursor/rules/mail.mdc)
- **画面遷移図**: [.cursor/rules/screen.mdc](mdc:.cursor/rules/screen.mdc)
- **データベース設計**: [.cursor/rules/database.mdc](mdc:.cursor/rules/database.mdc)
- **DDD設計**: [.cursor/rules/ddd.mdc](mdc:.cursor/rules/ddd.mdc)
- **バッチ処理**: [.cursor/rules/batch.mdc](mdc:.cursor/rules/batch.mdc)
- **Mermaid記法**: [.cursor/rules/mermaid.mdc](mdc:.cursor/rules/mermaid.mdc)
