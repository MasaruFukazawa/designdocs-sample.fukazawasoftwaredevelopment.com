---
description: 
globs: 
alwaysApply: true
---
# メール定義書作成ルール

このプロジェクトでメール定義書を作成・管理する際の標準ルールです。

## 基本ルール

### 1. ファイル保存場所
- メール定義書ファイルは [docs/design/source/mail/](mdc:docs/design/source/mail) ディレクトリに保存
- ファイル名は内容を表す分かりやすい名前（例：`user_registration_welcome.rst`, `password_reset_notification.rst`）

### 2. テンプレートの使用
- [docs/design/source/mail/template.rst](mdc:docs/design/source/mail/template.rst) をコピーして使用
- テンプレートの構造を維持し、全セクションを埋める
- **統一構造**：説明 → from → to → 件名 → 本文 → 変数一覧（必要に応じて）

### 3. インデックスファイルへの追加
- [docs/design/source/mail/index.rst](mdc:docs/design/source/mail/index.rst) のテーブルにリンクを追加
- メールタイトルと `:doc:` リンクを適切に記載
- テンプレートファイルは最後に配置

### 4. 用語・設計の統一
- 新しい用語は [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) に定義を記述
- 専門用語、システム固有の概念、業務用語は必ず定義
- ドメインモデルの用語と一貫性を保つ

## メール定義書の構造

### 必須セクション
1. **説明**
   - メールの目的と送信タイミング
   - 送信条件と背景
   - ビジネス価値

2. **fromメールアドレス**
   - 送信元アドレス
   - 表示名（ある場合）
   - 環境別設定（必要な場合）

3. **toメールアドレス**
   - 送信先の決定方法
   - 複数送信先の場合の条件
   - CCやBCCの使用条件

4. **件名**
   - 実際の件名
   - 変数使用時は `{variable_name}` 形式
   - 設計意図（必要な場合）

5. **本文**
   - メール本文
   - 変数は `{variable_name}` 形式
   - reStructuredTextのコードブロック内に記載

### オプションセクション
- **変数一覧**：変数名、説明、サンプル値を表形式で記載
- **エラーハンドリング**：送信失敗時の処理方針
- **テスト要件**：確認項目と手順

## 品質チェック

### 作成時チェック
- [ ] GitHubのissueと内容が一致
- [ ] テンプレート構造に準拠
- [ ] 件名・本文が具体的
- [ ] 変数名が統一
- [ ] インデックスファイル更新
- [ ] ユースケース記述更新
- [ ] ドメインモデルとの整合性

### レビューポイント
- [ ] ユーザーフレンドリー
- [ ] ビジネス要件充足
- [ ] セキュリティ配慮
- [ ] 他メールとの整合性
- [ ] エラー処理の考慮

## 作業手順

### 1. インプット情報の収集
- GitHubのissueの内容確認
- [docs/design/source/usecase/](mdc:docs/design/source/usecase) のユースケース記述参照
- [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) のドメインモデル確認
- 既存のメール定義書の確認

### 2. メール要件の分析
- **送信タイミング**: ユースケースの流れからメール送信のタイミングを特定
- **メール内容**: ドメインモデルの用語・概念に基づいて内容を整理
- **変数**: 動的に変更される部分の特定と命名規則の確認
- **エラー処理**: 送信失敗時の対応方針の検討

### 3. ファイル作成
- [docs/design/source/mail/template.rst](mdc:docs/design/source/mail/template.rst) をコピー
- 適切なファイル名での保存
- インデックスファイルの更新
- 関連するユースケース記述の更新準備

### 4. 記述作成
- テンプレートの各セクションを順次記入
- ドメインモデルの用語との整合性確認
- 変数名の命名規則遵守
- エラー処理方針の記述
- チェックリストに基づく品質確認

### 5. Git運用
- コミットメッセージの作成（メール定義書: [メール名] - [概要]）
- 変更内容の最終確認
- プッシュとレビュー依頼

## 関連ドキュメント
- **ワークフロー**: [.cursor/rules/workflow.mdc](mdc:.cursor/rules/workflow.mdc)
- **ユーザーストーリー**: [.cursor/rules/user_story.mdc](mdc:.cursor/rules/user_story.mdc)
- **ユースケース**: [.cursor/rules/usecase.mdc](mdc:.cursor/rules/usecase.mdc)
- **ドメインモデル**: [.cursor/rules/domain_model.mdc](mdc:.cursor/rules/domain_model.mdc)
- **Git運用**: [.cursor/rules/git.mdc](mdc:.cursor/rules/git.mdc)
