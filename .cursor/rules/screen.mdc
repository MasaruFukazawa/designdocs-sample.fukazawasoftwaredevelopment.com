---
description: 
globs: 
alwaysApply: true
---
# 画面遷移図作成ルール

このプロジェクトで画面遷移図を作成する際の標準ルールです。

## 基本ルール

### 1. ファイル保存場所
- **画面遷移図**: [docs/design/source/screen/diagram.rst](mdc:docs/design/source/screen/diagram.rst) をメイン図として使用
- **個別画面設計**: [docs/design/source/screen/](mdc:docs/design/source/screen) ディレクトリに個別ファイル
- **索引**: [docs/design/source/screen/index.rst](mdc:docs/design/source/screen/index.rst) に新ファイルのリンクを追加

### 2. テンプレート使用
- **画面遷移図**: [docs/design/source/screen/diagram.rst](mdc:docs/design/source/screen/diagram.rst) をベースに作成
- **個別画面設計**: 必要に応じて個別ファイルを作成
- **機能別画面遷移**: [docs/design/source/screen/diagram.rst](mdc:docs/design/source/screen/diagram.rst) の機能別画面遷移テンプレートを使用してdiagram.rstに直接追加

### 3. 機能別画面遷移テンプレートの使用
- **標準的な画面遷移パターン**: 単純な入力→検証→完了フローに使用
  - 基本的なCRUD操作（登録、更新、削除）
  - 単一画面での入力処理
  - エラー処理が比較的単純な場合
- **複雑なフローパターン**: 多段階・条件分岐を含むフローに使用
  - 複数画面にわたる入力処理
  - 条件による画面遷移の分岐
  - 複雑なエラーハンドリングが必要な場合
- **追加場所**: [docs/design/source/screen/diagram.rst](mdc:docs/design/source/screen/diagram.rst) の「機能別画面遷移テンプレート」セクションに直接追加
- **テンプレート適用**: 画面名・処理内容を具体的な機能に置き換えて使用

### 4. 用語・画面名統一
- 新しい用語・画面名は [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) に定義を記述
- 画面遷移図で使用する画面名・用語は必ずdomain_modelに登録されているものを使用
- ユースケースで定義されたアクター・操作と整合性を保つ

## 画面遷移図の要素

### 1. 画面の表現
```mermaid
%%{init: {"theme": "default"}}%%
graph TD
    Screen["通常画面<br/>（説明）"]
    InputScreen["入力画面<br/>（フォーム）"]
    ConfirmScreen["確認画面<br/>（確認・実行）"]
    CompleteScreen["完了画面<br/>（結果表示）"]
```

### 2. 遷移の表現
```mermaid
%%{init: {"theme": "default"}}%%
graph TD
    Start([開始])
    Screen1["画面1"]
    Screen2["画面2"]
    Screen3["画面3"]
    End([終了])
    
    Start --> Screen1
    Screen1 -->|条件A| Screen2
    Screen1 -->|条件B| Screen3
    Screen2 --> End
    Screen3 --> End
```

### 3. 推奨記法
- **通常遷移**: `Screen1 --> Screen2`
- **条件分岐**: `Screen1 -->|条件| Screen2`
- **開始・終了**: `Start([開始])`, `End([終了])`

### 4. 避けるべき記法
- **点線矢印**: `-.->` （Sphinx環境でエラー可能性）
- **複雑なノード形状**: 矩形以外の形状
- **日本語ラベル**: `: "日本語"` の複雑な使用
- **絵文字**: 環境依存の可能性あり

## 作成手順

### 1. インプット情報の収集
- [docs/design/source/usecase/diagram.rst](mdc:docs/design/source/usecase/diagram.rst) のユースケース図確認
- [docs/design/source/usecase/](mdc:docs/design/source/usecase) の個別ユースケース記述確認
- [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) のアクターと用語確認

### 2. 画面遷移の分析
- **基本コース**: 正常な画面遷移フローとして表現
- **代替コース**: 例外・分岐の遷移として表現
- **事前・事後条件**: 開始・終了画面の状態として考慮

### 3. ファイル作成
- テンプレートをコピーして新規ファイル作成
- アクター毎に画面遷移フローを分割
- 新しい画面名は必ずドメインモデルに追加

## 設計原則

### 1. ユーザビリティ
- 直感的な操作フロー
- 適切なエラー表示と復帰方法
- 戻る・進む操作の一貫性
- 無駄な画面遷移の排除

### 2. アクセシビリティ
- キーボード操作対応
- スクリーンリーダー対応
- モバイル対応での画面サイズ考慮

### 3. パフォーマンス
- 画面遷移の最適化
- データ読み込みの効率化
- 状態管理の適切な設計

### 4. セキュリティ
- 権限に応じた画面制御
- セッション管理
- 入力値検証

## Git運用

### コミットタイミング
- 新規画面遷移図作成時
- 既存画面遷移の重要な更新時
- インデックスファイル更新時

### コミットメッセージ形式
```
feat(screen): [機能名] - [概要]
```

例：
- `feat(screen): add user registration flow`
- `feat(screen): update login error handling`

## 品質チェックリスト

### 作成時チェック
- [ ] ユースケースと整合している
- [ ] 画面名がドメインモデルに定義されている
- [ ] 遷移条件が明確に記載されている
- [ ] エラー処理が考慮されている
- [ ] インデックスにファイルリンクが追加されている

### レビューポイント
- [ ] 操作フローが直感的
- [ ] エラーからの復帰が可能
- [ ] 権限制御が適切
- [ ] パフォーマンスが考慮されている
- [ ] アクセシビリティが確保されている

## インデックスファイル運用

### 基本構成
```rst
画面仕様
==============================================

.. toctree::
   :maxdepth: 1
   :caption: Contents:

   diagram
   [画面仕様ファイル名]
```

### 追加手順
1. 新ファイルを作成
2. `toctree` に追加（拡張子なし）
3. 重要度順に並べ替え
4. `diagram` は最上位に維持

## 関連ルール

- [ドメインモデル作成ルール](mdc:.cursor/rules/domain_model.mdc)
- [ユーザーストーリー作成ルール](mdc:.cursor/rules/user_story.mdc)
- [ユースケース作成ルール](mdc:.cursor/rules/usecase.mdc)
- [プロジェクト設計ワークフロー](mdc:.cursor/rules/workflow.mdc)
- [データベース設計ルール](mdc:.cursor/rules/database.mdc)
- [DDD設計ルール](mdc:.cursor/rules/ddd.mdc)
- [バッチ処理設計ルール](mdc:.cursor/rules/batch.mdc)
- [メール定義書作成ルール](mdc:.cursor/rules/mail.mdc)
- [Git運用ルール](mdc:.cursor/rules/git.mdc)
- [Mermaid記法ルール](mdc:.cursor/rules/mermaid.mdc)
