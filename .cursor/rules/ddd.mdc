---
description: 
globs: 
alwaysApply: false
---
# DDD（Domain-Driven Design）設計ルール

このプロジェクトでDDD（Domain-Driven Design）に基づく設計文書を作成する際の標準ルールです。

## 基本ルール

### 1. ファイル保存場所
- **DDD設計文書**: [docs/design/source/ddd/](mdc:docs/design/source/ddd) ディレクトリに保存
- **索引**: [docs/design/source/ddd/index.rst](mdc:docs/design/source/ddd/index.rst) にリンクを追加

### 2. テンプレートの使用
- **基本構造**: クラス名 → 変数 → メソッドの順で記述
- **統一フォーマット**: 既存の [docs/design/source/ddd/index.rst](mdc:docs/design/source/ddd/index.rst) をベースに拡張

### 3. インデックスファイルへの追加
- `docs/design/source/ddd/index.rst` にリンクを追加
- ファイル名は機能やバウンデッドコンテキスト名にする
- テンプレートファイルは最後に配置

### 4. 用語・設計の統一
- 新しい用語・概念は [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) に定義を記述
- DDD設計で使用する用語は必ずdomain_modelに登録されているものを使用
- ユースケースやデータベース設計との整合性を保つ

## 設計原則

### クラス設計
1. **エンティティ**
   - 一意性を持つドメインオブジェクト
   - IDによる識別
   - ライフサイクル管理

2. **値オブジェクト**
   - 不変で属性の組み合わせで定義
   - 値による等価性判断
   - バリデーションルール

3. **集約**
   - エンティティと値オブジェクトの集まり
   - 整合性の単位
   - トランザクション境界

4. **ドメインサービス**
   - エンティティや値オブジェクトに属さないロジック
   - ビジネスルールの実装
   - 複数オブジェクト間の協調

5. **リポジトリ**
   - 集約の永続化を抽象化
   - データアクセスの一元管理
   - トランザクション制御

### 実装要件

#### セキュリティ要件
- パスワードハッシュ化の実装
- 個人情報保護の対策
- 不正アクセス防止策
- データ暗号化の実装
- 認証・認可機能の実装

#### パフォーマンス要件
- レスポンス時間要件の考慮
- 同時実行制御の実装
- キャッシュ戦略の設計
- データベースアクセス最適化
- メモリ使用量の最適化

#### 外部システム連携
- 外部APIとの連携方法とタイミング
- エラーハンドリング方針の策定
- タイムアウトと再試行戦略
- データ整合性の保証
- 障害時の代替手段

### テスト戦略

#### 単体テスト
- **エンティティテスト**: ビジネスルールとメソッドの動作検証
- **値オブジェクトテスト**: バリデーションと不変条件の検証
- **ドメインサービステスト**: ビジネスロジックの網羅的テスト
- **集約テスト**: 不変条件と操作の整合性テスト

#### 統合テスト
- **リポジトリテスト**: 永続化とデータ整合性の検証
- **アプリケーションサービステスト**: ユースケース実行の検証
- **ドメインイベントテスト**: イベント発行と処理の検証
- **外部連携テスト**: 外部システムとの連携動作検証

#### 受け入れテスト
- **ユースケースシナリオテスト**: エンドツーエンドのシナリオ実行
- **ビジネスルール適用テスト**: ビジネス要件の満足度検証
- **例外シナリオテスト**: エラーケースとリカバリの検証
- **パフォーマンステスト**: 性能要件の達成確認

## 品質チェック

### 作成時チェックポイント
- [ ] ドメインモデルとの整合性がある
- [ ] ユースケースのビジネスロジックが適切に反映されている
- [ ] エンティティの一意性が明確に定義されている
- [ ] 値オブジェクトの不変性が保たれている
- [ ] 集約の境界が適切に設計されている
- [ ] ビジネスルールが明確に記述されている
- [ ] `docs/design/source/ddd/index.rst`にリンクが追加されている

### レビューポイント
- [ ] ドメイン専門家の知識が適切に反映されている
- [ ] 技術的制約とビジネス要件のバランスが取れている
- [ ] 将来の変更に対して柔軟性がある
- [ ] 他のバウンデッドコンテキストとの関係が明確
- [ ] データベース設計との整合性がある

## 作業手順

### 1. インプット情報の収集
- GitHubのissueの内容確認
- [docs/design/source/usecase/](mdc:docs/design/source/usecase) のユースケース参照
- [docs/design/source/domain_model.rst](mdc:docs/design/source/domain_model.rst) でドメインモデル確認
- ドメインエキスパートへのヒアリング内容確認

### 2. DDD分析
- **バウンデッドコンテキスト**: ユースケース図のアクター・システム境界に基づいてコンテキストの境界と関係性を特定
- **集約**: ユースケースの基本フローで扱われるエンティティと値オブジェクトの集約関係を分析
- **ドメインサービス**: ユースケースの事前条件・事後条件からビジネスルールとサービスを特定
- **リポジトリ**: ユースケースのデータ操作に基づいて永続化要件を分析

### 3. ファイル作成
- ユースケース図の境界に基づいたバウンデッドコンテキスト図の作成
- ユースケースの基本フローに基づいた集約定義ファイルの作成
- ユースケースの振る舞いに基づいたサービスインターフェース定義の作成
- ユースケースのデータ操作に基づいたリポジトリインターフェース定義の作成

### 4. 記述作成
- ユースケース図の境界に基づいたバウンデッドコンテキストの詳細定義
- ユースケースの基本フローに基づいた集約ルートとエンティティの関係定義
- ユースケースの事前・事後条件に基づいたドメインサービスの責務記述
- ユースケースのデータ操作に基づいたリポジトリの実装方針記述
- チェックリストに基づく品質確認

### 5. Git運用
- コミットメッセージの作成（feat(ddd): DDD設計追加 - [概要]）
- 変更内容の最終確認
- プッシュとレビュー依頼

## 関連ドキュメント
- **ワークフロー**: [.cursor/rules/workflow.mdc](mdc:.cursor/rules/workflow.mdc)
- **ユーザーストーリー**: [.cursor/rules/user_story.mdc](mdc:.cursor/rules/user_story.mdc)
- **ユースケース**: [.cursor/rules/usecase.mdc](mdc:.cursor/rules/usecase.mdc)
- **ドメインモデル**: [.cursor/rules/domain_model.mdc](mdc:.cursor/rules/domain_model.mdc)
- **データベース設計**: [.cursor/rules/database.mdc](mdc:.cursor/rules/database.mdc)
- **Git運用**: [.cursor/rules/git.mdc](mdc:.cursor/rules/git.mdc)
